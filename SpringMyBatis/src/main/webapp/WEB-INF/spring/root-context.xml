<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- datasource -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="url" value="jdbc:oracle:thin:@localhost:1521:xe" />
		<property name="username" value="hr" />
		<property name="password" value="hr" />
	</bean>
	<!-- SqlSessionFactory(마이바티스 자체) -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatis-config.xml" /><!-- 마이파티스 환경설정파일(src/main/resource) -->
		<property name="mapperLocations" value="classpath:/mapper/*.xml" /><!-- 자바와 오라클사이에 매핑해주는 파일들 위치(src/main/resource/mapper) -->
	</bean>
	<!-- SqlSessionTemplate: spring과 mybatis 연동, sqlsession 생성에 관여 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<!-- mapper interface: mapping파일의 sql call을 위한 interface 즉, mapping 파일의 sql을 java interface로 호출하게 해줌 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 이 패키지 아래 모든 인터페이스를 mapper 인터페이스로 인식 -->
		<property name="basePackage" value="com.empmanage.sawon.service.dao" />
	</bean>
	<!-- DataSourceTransactionManager: 주로 jdbc나 mybatis로 db접근시 사용 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- @Transactional 사용해서 트랜잭션 처리 가능하게 함(자동 롤백) -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
