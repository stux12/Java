<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd">

	
	<!-- 공통(aspect), 핵심(주요)(target) 로직에 대한 처리방식을 알려준다 -->
	
	<!-- 이걸 선언해줘야 @Aspect를 사용하겠다라는 정의 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<bean name="securityBean" class="com.study.helloProcess.Security"></bean>
	<bean name="helloProcessBean" class="com.study.helloProcess.HelloProcess"></bean>
	
	<!-- aop구성 시작 -->
<!-- 	<aop:config>
		aspect는 공통기능
		<aop:aspect id="securityAspect" ref="securityBean">
			HelloProcess의 모든 메소드들을 관련시킴
			<aop:pointcut expression="within(com.study.helloProcess.HelloProcess)" id="secuPoint"/>
			<aop:before pointcut-ref="secuPoint" method="goSecurity"/>
		</aop:aspect>
	</aop:config>
 -->	<!-- 즉, helloProcess.HelloProcess에 있는 모든 메소드가 실행되려고 하면
		그전에 goSecurity라는 메소드가 먼저 수행되고 나서 수행된다!! -->
		
		
	
</beans>
